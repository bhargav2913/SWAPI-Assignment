{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport { forkJoin, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SwapiService {\n  http;\n  base = 'https://swapi.dev/api';\n  personCache = new Map();\n  filmCache = new Map();\n  speciesCache = new Map();\n  starshipCache = new Map();\n  constructor(http) {\n    this.http = http;\n  }\n  idFromUrl(url) {\n    const m = url.match(/\\/(\\d+)\\/?$/);\n    return m ? +m[1] : NaN;\n  }\n  parseBirthYear(birth) {\n    if (!birth || birth.toLowerCase() === 'unknown') return null;\n    const m = birth.match(/^(\\d+(?:\\.\\d+)?)\\s*(bby|aby)$/i);\n    if (!m) return null;\n    const n = parseFloat(m[1]);\n    const era = m[2].toLowerCase();\n    return era === 'bby' ? -n : n;\n  }\n  getAllPeople() {\n    const first$ = this.http.get(`${this.base}/people/?page=1`);\n    return first$.pipe(switchMap(first => {\n      const total = first.count;\n      const pageSize = first.results.length;\n      const pages = Math.ceil(total / pageSize);\n      const reqs = [of(first), ...Array.from({\n        length: pages - 1\n      }, (_, i) => this.http.get(`${this.base}/people/?page=${i + 2}`))];\n      return forkJoin(reqs);\n    }), map(chunks => chunks.flatMap(c => c.results)), map(all => {\n      all.forEach(p => {\n        const id = this.idFromUrl(p.url);\n        if (!Number.isNaN(id)) this.personCache.set(id, p);\n      });\n      return all;\n    }));\n  }\n  getPersonById(id) {\n    const hit = this.personCache.get(id);\n    if (hit) return of(hit);\n    return this.http.get(`${this.base}/people/${id}/`).pipe(map(p => {\n      this.personCache.set(id, p);\n      return p;\n    }));\n  }\n  getEntity(url, cache, fetcher) {\n    const hit = cache.get(url);\n    if (hit) return of(hit);\n    return fetcher(url).pipe(map(e => (cache.set(url, e), e)));\n  }\n  getFilm(url) {\n    return this.getEntity(url, this.filmCache, u => this.http.get(u));\n  }\n  getSpecies(url) {\n    return this.getEntity(url, this.speciesCache, u => this.http.get(u));\n  }\n  getStarship(url) {\n    return this.getEntity(url, this.starshipCache, u => this.http.get(u));\n  }\n  prefetchForFilters(people) {\n    const filmUrls = Array.from(new Set(people.flatMap(p => p.films)));\n    const speciesUrls = Array.from(new Set(people.flatMap(p => p.species)));\n    const film$ = filmUrls.length ? forkJoin(filmUrls.map(u => this.getFilm(u))) : of([]);\n    const species$ = speciesUrls.length ? forkJoin(speciesUrls.map(u => this.getSpecies(u))) : of([]);\n    return forkJoin([film$, species$]);\n  }\n  static ɵfac = function SwapiService_Factory(t) {\n    return new (t || SwapiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SwapiService,\n    factory: SwapiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","switchMap","forkJoin","of","SwapiService","http","base","personCache","Map","filmCache","speciesCache","starshipCache","constructor","idFromUrl","url","m","match","NaN","parseBirthYear","birth","toLowerCase","n","parseFloat","era","getAllPeople","first$","get","pipe","first","total","count","pageSize","results","length","pages","Math","ceil","reqs","Array","from","_","i","chunks","flatMap","c","all","forEach","p","id","Number","isNaN","set","getPersonById","hit","getEntity","cache","fetcher","e","getFilm","u","getSpecies","getStarship","prefetchForFilters","people","filmUrls","Set","films","speciesUrls","species","film$","species$","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\bharg\\Downloads\\Angular Assignment\\src\\app\\services\\swapi.service.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, switchMap } from 'rxjs/operators';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport type { Person, Film, Species, Starship } from '../models/swapi.models';\n\n@Injectable({ providedIn: 'root' })\nexport class SwapiService {\n  private base = 'https://swapi.dev/api';\n  private personCache = new Map<number, Person>();\n  private filmCache = new Map<string, Film>();\n  private speciesCache = new Map<string, Species>();\n  private starshipCache = new Map<string, Starship>();\n\n  constructor(private http: HttpClient) {}\n\n  idFromUrl(url: string): number {\n    const m = url.match(/\\/(\\d+)\\/?$/);\n    return m ? +m[1] : NaN;\n  }\n\n  parseBirthYear(birth: string): number | null {\n    if (!birth || birth.toLowerCase() === 'unknown') return null;\n    const m = birth.match(/^(\\d+(?:\\.\\d+)?)\\s*(bby|aby)$/i);\n    if (!m) return null;\n    const n = parseFloat(m[1]);\n    const era = m[2].toLowerCase();\n    return era === 'bby' ? -n : n;\n  }\n\n  getAllPeople(): Observable<Person[]> {\n    const first$ = this.http.get<any>(`${this.base}/people/?page=1`);\n    return first$.pipe(\n      switchMap(first => {\n        const total = first.count as number;\n        const pageSize = first.results.length as number;\n        const pages = Math.ceil(total / pageSize);\n        const reqs = [of(first), ...Array.from({ length: pages - 1 }, (_, i) =>\n          this.http.get<any>(`${this.base}/people/?page=${i + 2}`)\n        )];\n        return forkJoin(reqs);\n      }),\n      map(chunks => chunks.flatMap(c => c.results as Person[])),\n      map(all => {\n        all.forEach(p => {\n          const id = this.idFromUrl(p.url);\n          if (!Number.isNaN(id)) this.personCache.set(id, p);\n        });\n        return all;\n      })\n    );\n  }\n\n  getPersonById(id: number): Observable<Person> {\n    const hit = this.personCache.get(id);\n    if (hit) return of(hit);\n    return this.http.get<Person>(`${this.base}/people/${id}/`).pipe(map(p => { this.personCache.set(id,p); return p; }));\n  }\n\n  private getEntity<T>(url: string, cache: Map<string, T>, fetcher: (u:string)=>Observable<T>): Observable<T> {\n    const hit = cache.get(url);\n    if (hit) return of(hit);\n    return fetcher(url).pipe(map(e => (cache.set(url, e), e)));\n  }\n\n  getFilm(url: string) { return this.getEntity<Film>(url, this.filmCache, (u)=>this.http.get<Film>(u)); }\n  getSpecies(url: string) { return this.getEntity<Species>(url, this.speciesCache, (u)=>this.http.get<Species>(u)); }\n  getStarship(url: string) { return this.getEntity<Starship>(url, this.starshipCache, (u)=>this.http.get<Starship>(u)); }\n\n  prefetchForFilters(people: Person[]) {\n    const filmUrls = Array.from(new Set(people.flatMap(p => p.films)));\n    const speciesUrls = Array.from(new Set(people.flatMap(p => p.species)));\n    const film$ = filmUrls.length ? forkJoin(filmUrls.map(u => this.getFilm(u))) : of([] as Film[]);\n    const species$ = speciesUrls.length ? forkJoin(speciesUrls.map(u => this.getSpecies(u))) : of([] as Species[]);\n    return forkJoin([film$, species$]);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}