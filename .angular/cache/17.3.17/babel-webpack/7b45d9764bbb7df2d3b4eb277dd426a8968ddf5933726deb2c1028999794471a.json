{"ast":null,"code":"import { of, expand, map, reduce, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SwapiService {\n  http;\n  // ⚡ Change here depending on API you want\n  baseUrl = 'https://swapi.info';\n  // alternative: 'https://swapi.py4e.com/api'\n  constructor(http) {\n    this.http = http;\n  }\n  // ---------- PEOPLE ----------\n  getAllPeople() {\n    const url = `${this.baseUrl}/people`;\n    return this.http.get(url).pipe(switchMap(res => {\n      if (Array.isArray(res)) {\n        // ✅ swapi.info returns a flat array\n        return of(res);\n      }\n      if (res && res.results) {\n        // ✅ swapi.py4e.com / swapi.dev paginated\n        return this.fetchAllPages(url);\n      }\n      return of([]);\n    }));\n  }\n  fetchAllPages(url) {\n    return this.http.get(url).pipe(expand(res => res.next ? this.http.get(res.next) : of()), map(res => res?.results ?? []), reduce((acc, results) => [...acc, ...results], []));\n  }\n  getPersonById(id) {\n    return this.http.get(`${this.baseUrl}/people/${id}`);\n  }\n  // ---------- FILMS ----------\n  getAllFilms() {\n    const url = `${this.baseUrl}/films`;\n    return this.http.get(url).pipe(switchMap(res => {\n      if (Array.isArray(res)) return of(res);\n      if (res && res.results) return this.fetchAllPages(url);\n      return of([]);\n    }));\n  }\n  getFilm(url) {\n    return this.http.get(url);\n  }\n  // ---------- SPECIES ----------\n  getAllSpecies() {\n    const url = `${this.baseUrl}/species`;\n    return this.http.get(url).pipe(switchMap(res => {\n      if (Array.isArray(res)) return of(res);\n      if (res && res.results) return this.fetchAllPages(url);\n      return of([]);\n    }));\n  }\n  getSpecies(url) {\n    return this.http.get(url);\n  }\n  // ---------- STARSHIPS ----------\n  getAllStarships() {\n    const url = `${this.baseUrl}/starships`;\n    return this.http.get(url).pipe(switchMap(res => {\n      if (Array.isArray(res)) return of(res);\n      if (res && res.results) return this.fetchAllPages(url);\n      return of([]);\n    }));\n  }\n  getStarship(url) {\n    return this.http.get(url);\n  }\n  // ---------- PREFETCH (films + species for filters) ----------\n  prefetchForFilters(people) {\n    const filmUrls = new Set();\n    const speciesUrls = new Set();\n    people.forEach(p => {\n      p.films.forEach(f => filmUrls.add(f));\n      p.species.forEach(s => speciesUrls.add(s));\n    });\n    const films$ = filmUrls.size ? this.getAllFilms().pipe(map(films => films.filter(f => filmUrls.has(f.url)))) : of([]);\n    const species$ = speciesUrls.size ? this.getAllSpecies().pipe(map(species => species.filter(s => speciesUrls.has(s.url)))) : of([]);\n    return films$.pipe(switchMap(films => species$.pipe(map(species => [films, species]))));\n  }\n  // ---------- UTILITIES ----------\n  idFromUrl(url) {\n    const parts = url.split('/').filter(Boolean);\n    return Number(parts[parts.length - 1]);\n  }\n  /**\n   * Parse SWAPI birth year into a number for filtering:\n   * - \"19BBY\" → -19\n   * - \"5ABY\"  → 5\n   * - \"unknown\" → null\n   * - \"-30\" → -30 (user input, means 30BBY)\n   * - \"5\" → 5 (user input, means 5ABY)\n   */\n  parseBirthYear(value) {\n    if (value === null || value === '' || value === 'unknown') return null;\n    // direct numeric input (from user filter)\n    if (typeof value === 'number') return value;\n    const num = parseFloat(value);\n    if (isNaN(num)) return null;\n    if (value.toUpperCase().endsWith('BBY')) return -num;\n    if (value.toUpperCase().endsWith('ABY')) return num;\n    // plain number string → assume ABY\n    return num;\n  }\n  static ɵfac = function SwapiService_Factory(t) {\n    return new (t || SwapiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SwapiService,\n    factory: SwapiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","expand","map","reduce","switchMap","SwapiService","http","baseUrl","constructor","getAllPeople","url","get","pipe","res","Array","isArray","results","fetchAllPages","next","acc","getPersonById","id","getAllFilms","getFilm","getAllSpecies","getSpecies","getAllStarships","getStarship","prefetchForFilters","people","filmUrls","Set","speciesUrls","forEach","p","films","f","add","species","s","films$","size","filter","has","species$","idFromUrl","parts","split","Boolean","Number","length","parseBirthYear","value","num","parseFloat","isNaN","toUpperCase","endsWith","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\bharg\\Downloads\\Angular Assignment\\src\\app\\services\\swapi.service.ts"],"sourcesContent":["\n// import { Injectable } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { map, switchMap } from 'rxjs/operators';\n// import { forkJoin, Observable, of } from 'rxjs';\n// import type { Person, Film, Species, Starship } from '../models/swapi.models';\n\n// @Injectable({ providedIn: 'root' })\n// export class SwapiService {\n//   private base = 'https://swapi.py4e.com/api';\n//   private personCache = new Map<number, Person>();\n//   private filmCache = new Map<string, Film>();\n//   private speciesCache = new Map<string, Species>();\n//   private starshipCache = new Map<string, Starship>();\n\n//   constructor(private http: HttpClient) {}\n\n//   idFromUrl(url: string): number {\n//     const m = url.match(/\\/(\\d+)\\/?$/);\n//     return m ? +m[1] : NaN;\n//   }\n\n// parseBirthYear(value: string | number | null): number | null {\n//   if (value === null || value === '' || value === 'unknown') return null;\n\n//   if (typeof value === 'number') return value;\n\n//   const num = parseFloat(value);\n//   if (isNaN(num)) return null;\n\n//   if (value.toUpperCase().endsWith('BBY')) return -num;\n//   if (value.toUpperCase().endsWith('ABY')) return num;\n\n//   return num;\n// }\n\n//   getAllPeople(): Observable<Person[]> {\n//     const first$ = this.http.get<any>(`${this.base}/people/?page=1`);\n//     return first$.pipe(\n//       switchMap(first => {\n//         const total = first.count as number;\n//         const pageSize = first.results.length as number;\n//         const pages = Math.ceil(total / pageSize);\n//         const reqs = [of(first), ...Array.from({ length: pages - 1 }, (_, i) =>\n//           this.http.get<any>(`${this.base}/people/?page=${i + 2}`)\n//         )];\n//         return forkJoin(reqs);\n//       }),\n//       map(chunks => chunks.flatMap(c => c.results as Person[])),\n//       map(all => {\n//         all.forEach(p => {\n//           const id = this.idFromUrl(p.url);\n//           if (!Number.isNaN(id)) this.personCache.set(id, p);\n//         });\n//         return all;\n//       })\n//     );\n//   }\n\n//   getPersonById(id: number): Observable<Person> {\n//     const hit = this.personCache.get(id);\n//     if (hit) return of(hit);\n//     return this.http.get<Person>(`${this.base}/people/${id}/`).pipe(map(p => { this.personCache.set(id,p); return p; }));\n//   }\n\n//   private getEntity<T>(url: string, cache: Map<string, T>, fetcher: (u:string)=>Observable<T>): Observable<T> {\n//     const hit = cache.get(url);\n//     if (hit) return of(hit);\n//     return fetcher(url).pipe(map(e => (cache.set(url, e), e)));\n//   }\n\n//   getFilm(url: string) { return this.getEntity<Film>(url, this.filmCache, (u)=>this.http.get<Film>(u)); }\n//   getSpecies(url: string) { return this.getEntity<Species>(url, this.speciesCache, (u)=>this.http.get<Species>(u)); }\n//   getStarship(url: string) { return this.getEntity<Starship>(url, this.starshipCache, (u)=>this.http.get<Starship>(u)); }\n\n//   prefetchForFilters(people: Person[]) {\n//     const filmUrls = Array.from(new Set(people.flatMap(p => p.films)));\n//     const speciesUrls = Array.from(new Set(people.flatMap(p => p.species)));\n//     const film$ = filmUrls.length ? forkJoin(filmUrls.map(u => this.getFilm(u))) : of([] as Film[]);\n//     const species$ = speciesUrls.length ? forkJoin(speciesUrls.map(u => this.getSpecies(u))) : of([] as Species[]);\n//     return forkJoin([film$, species$]);\n//   }\n// }\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, expand, map, reduce, switchMap } from 'rxjs';\nimport type { Person, Film, Species, Starship } from '../models/swapi.models';\n\n@Injectable({ providedIn: 'root' })\nexport class SwapiService {\n  // ⚡ Change here depending on API you want\n  private baseUrl = 'https://swapi.info'; \n  // alternative: 'https://swapi.py4e.com/api'\n\n  constructor(private http: HttpClient) {}\n\n  // ---------- PEOPLE ----------\n  getAllPeople(): Observable<Person[]> {\n    const url = `${this.baseUrl}/people`;\n    return this.http.get<any>(url).pipe(\n      switchMap(res => {\n        if (Array.isArray(res)) {\n          // ✅ swapi.info returns a flat array\n          return of(res as Person[]);\n        }\n        if (res && res.results) {\n          // ✅ swapi.py4e.com / swapi.dev paginated\n          return this.fetchAllPages<Person>(url);\n        }\n        return of([]);\n      })\n    );\n  }\n\n  private fetchAllPages<T>(url: string): Observable<T[]> {\n    return this.http.get<any>(url).pipe(\n      expand(res => (res.next ? this.http.get<any>(res.next) : of())),\n      map(res => res?.results ?? []),\n      reduce((acc, results) => [...acc, ...results], [] as T[])\n    );\n  }\n\n  getPersonById(id: number): Observable<Person> {\n    return this.http.get<Person>(`${this.baseUrl}/people/${id}`);\n  }\n\n  // ---------- FILMS ----------\n  getAllFilms(): Observable<Film[]> {\n    const url = `${this.baseUrl}/films`;\n    return this.http.get<any>(url).pipe(\n      switchMap(res => {\n        if (Array.isArray(res)) return of(res as Film[]);\n        if (res && res.results) return this.fetchAllPages<Film>(url);\n        return of([]);\n      })\n    );\n  }\n\n  getFilm(url: string): Observable<Film> {\n    return this.http.get<Film>(url);\n  }\n\n  // ---------- SPECIES ----------\n  getAllSpecies(): Observable<Species[]> {\n    const url = `${this.baseUrl}/species`;\n    return this.http.get<any>(url).pipe(\n      switchMap(res => {\n        if (Array.isArray(res)) return of(res as Species[]);\n        if (res && res.results) return this.fetchAllPages<Species>(url);\n        return of([]);\n      })\n    );\n  }\n\n  getSpecies(url: string): Observable<Species> {\n    return this.http.get<Species>(url);\n  }\n\n  // ---------- STARSHIPS ----------\n  getAllStarships(): Observable<Starship[]> {\n    const url = `${this.baseUrl}/starships`;\n    return this.http.get<any>(url).pipe(\n      switchMap(res => {\n        if (Array.isArray(res)) return of(res as Starship[]);\n        if (res && res.results) return this.fetchAllPages<Starship>(url);\n        return of([]);\n      })\n    );\n  }\n\n  getStarship(url: string): Observable<Starship> {\n    return this.http.get<Starship>(url);\n  }\n\n  // ---------- PREFETCH (films + species for filters) ----------\n  prefetchForFilters(people: Person[]) {\n    const filmUrls = new Set<string>();\n    const speciesUrls = new Set<string>();\n\n    people.forEach(p => {\n      p.films.forEach(f => filmUrls.add(f));\n      p.species.forEach(s => speciesUrls.add(s));\n    });\n\n    const films$ = filmUrls.size\n      ? this.getAllFilms().pipe(\n          map(films => films.filter(f => filmUrls.has(f.url)))\n        )\n      : of([]);\n\n    const species$ = speciesUrls.size\n      ? this.getAllSpecies().pipe(\n          map(species => species.filter(s => speciesUrls.has(s.url)))\n        )\n      : of([]);\n\n    return films$.pipe(\n      switchMap(films =>\n        species$.pipe(map(species => [films, species] as [Film[], Species[]]))\n      )\n    );\n  }\n\n  // ---------- UTILITIES ----------\n  idFromUrl(url: string): number {\n    const parts = url.split('/').filter(Boolean);\n    return Number(parts[parts.length - 1]);\n  }\n\n  /**\n   * Parse SWAPI birth year into a number for filtering:\n   * - \"19BBY\" → -19\n   * - \"5ABY\"  → 5\n   * - \"unknown\" → null\n   * - \"-30\" → -30 (user input, means 30BBY)\n   * - \"5\" → 5 (user input, means 5ABY)\n   */\n  parseBirthYear(value: string | number | null): number | null {\n    if (value === null || value === '' || value === 'unknown') return null;\n\n    // direct numeric input (from user filter)\n    if (typeof value === 'number') return value;\n\n    const num = parseFloat(value);\n    if (isNaN(num)) return null;\n\n    if (value.toUpperCase().endsWith('BBY')) return -num;\n    if (value.toUpperCase().endsWith('ABY')) return num;\n\n    // plain number string → assume ABY\n    return num;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}