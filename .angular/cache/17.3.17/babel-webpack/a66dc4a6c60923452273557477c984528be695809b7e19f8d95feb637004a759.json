{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport { forkJoin, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SwapiService = /*#__PURE__*/(() => {\n  class SwapiService {\n    http;\n    base = 'https://swapi.dev/api';\n    personCache = new Map();\n    filmCache = new Map();\n    speciesCache = new Map();\n    starshipCache = new Map();\n    constructor(http) {\n      this.http = http;\n    }\n    idFromUrl(url) {\n      const m = url.match(/\\/(\\d+)\\/?$/);\n      return m ? +m[1] : NaN;\n    }\n    parseBirthYear(birth) {\n      if (!birth || birth.toLowerCase() === 'unknown') return null;\n      const m = birth.match(/^(\\d+(?:\\.\\d+)?)\\s*(bby|aby)$/i);\n      if (!m) return null;\n      const n = parseFloat(m[1]);\n      const era = m[2].toLowerCase();\n      return era === 'bby' ? -n : n;\n    }\n    getAllPeople() {\n      const first$ = this.http.get(`${this.base}/people/?page=1`);\n      return first$.pipe(switchMap(first => {\n        const total = first.count;\n        const pageSize = first.results.length;\n        const pages = Math.ceil(total / pageSize);\n        const reqs = [of(first), ...Array.from({\n          length: pages - 1\n        }, (_, i) => this.http.get(`${this.base}/people/?page=${i + 2}`))];\n        return forkJoin(reqs);\n      }), map(chunks => chunks.flatMap(c => c.results)), map(all => {\n        all.forEach(p => {\n          const id = this.idFromUrl(p.url);\n          if (!Number.isNaN(id)) this.personCache.set(id, p);\n        });\n        return all;\n      }));\n    }\n    getPersonById(id) {\n      const hit = this.personCache.get(id);\n      if (hit) return of(hit);\n      return this.http.get(`${this.base}/people/${id}/`).pipe(map(p => {\n        this.personCache.set(id, p);\n        return p;\n      }));\n    }\n    getEntity(url, cache, fetcher) {\n      const hit = cache.get(url);\n      if (hit) return of(hit);\n      return fetcher(url).pipe(map(e => (cache.set(url, e), e)));\n    }\n    getFilm(url) {\n      return this.getEntity(url, this.filmCache, u => this.http.get(u));\n    }\n    getSpecies(url) {\n      return this.getEntity(url, this.speciesCache, u => this.http.get(u));\n    }\n    getStarship(url) {\n      return this.getEntity(url, this.starshipCache, u => this.http.get(u));\n    }\n    prefetchForFilters(people) {\n      const filmUrls = Array.from(new Set(people.flatMap(p => p.films)));\n      const speciesUrls = Array.from(new Set(people.flatMap(p => p.species)));\n      const film$ = filmUrls.length ? forkJoin(filmUrls.map(u => this.getFilm(u))) : of([]);\n      const species$ = speciesUrls.length ? forkJoin(speciesUrls.map(u => this.getSpecies(u))) : of([]);\n      return forkJoin([film$, species$]);\n    }\n    static ɵfac = function SwapiService_Factory(t) {\n      return new (t || SwapiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SwapiService,\n      factory: SwapiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return SwapiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}